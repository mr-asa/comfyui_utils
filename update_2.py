import os
import git
from colorama import init, Fore, Style
from requirements_checker.config_manager import config_manager
from pathlib import Path
from datetime import datetime

# Initialize colorama
init()

def get_default_branch(repo):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å HEAD –∏–∑ remote
        try:
            remote_head = repo.remotes.origin.refs.HEAD.reference
            return remote_head.name.replace('origin/', '')
        except:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º —Å—Ä–µ–¥–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–µ—Ç–æ–∫
        remote_branches = [ref.name.replace("origin/", "") for ref in repo.remotes.origin.refs if not ref.name.endswith('/HEAD')]
        
        for candidate in ["main", "master", "dev", "develop", "stable"]:
            if candidate in remote_branches:
                return candidate
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
        if remote_branches:
            return remote_branches[0]
        
        return None
    except Exception as e:
        print(f"\t‚ùå Error determining default branch: {e}")
        return None

def get_latest_commit_info(repo, branch_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ –≤–µ—Ç–∫–∏"""
    try:
        if f'origin/{branch_name}' in [ref.name for ref in repo.remotes.origin.refs]:
            commit = repo.commit(f'origin/{branch_name}')
        else:
            commit = repo.commit(branch_name)
        return commit, commit.committed_datetime
    except:
        return None, None

def find_best_branch_to_update(repo, current_branch_name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à—É—é –≤–µ—Ç–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    default_branch = get_default_branch(repo)
    if not default_branch:
        return current_branch_name, "unknown", "Could not determine default branch"
    
    # –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–µ
    if current_branch_name == default_branch:
        return current_branch_name, "default", None
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –∫–æ–º–º–∏—Ç–æ–≤
    current_commit, current_date = get_latest_commit_info(repo, current_branch_name)
    default_commit, default_date = get_latest_commit_info(repo, default_branch)
    
    if not current_date or not default_date:
        return current_branch_name, "unknown", "Could not compare branch dates"
    
    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ç–∫–∞ –Ω–æ–≤–µ–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ—ë
    if default_date > current_date:
        return default_branch, "switch", f"Switching to newer default branch ({default_branch})"
    else:
        return current_branch_name, "custom", f"Current branch ({current_branch_name}) is up to date"

def stash_local_changes(repo):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ stash"""
    if repo.is_dirty():
        try:
            repo.git.stash('push', '-m', f'Auto-stash {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
            return True, "üì¶ Local changes stashed"
        except git.exc.GitCommandError as e:
            return False, f"‚ùå Failed to stash changes: {e}"
    return False, None

def is_git_repository(directory):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º"""
    return os.path.exists(os.path.join(directory, '.git'))

def should_skip_directory(directory):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
    skip_patterns = ['__pycache__', '.git', 'node_modules', '.vscode', '.idea', 
                     '__MACOSX', '.DS_Store', 'Thumbs.db']
    dir_name = os.path.basename(directory)
    return any(pattern in dir_name for pattern in skip_patterns)

def initialize_git_repository(directory):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º remote URL"""
    try:
        repo_name = os.path.basename(directory)
        print(f"\tüìÅ Directory '{repo_name}' is not a git repository")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        repo_url = input(f"\tEnter git repository URL (or press Enter to skip): ").strip()
        
        if not repo_url:
            return False, "Skipped by user"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not (repo_url.startswith('http') or repo_url.startswith('git@')):
            return False, "Invalid repository URL format"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        existing_files = os.listdir(directory)
        if existing_files:
            print(f"\t‚ö†Ô∏è  Directory contains {len(existing_files)} files/folders")
            overwrite = input(f"\tReplace contents with git repository? (y/N): ").strip().lower()
            if overwrite != 'y':
                return False, "User chose not to overwrite existing content"
            
            # –°–æ–∑–¥–∞–µ–º backup –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            backup_dir = f"{directory}_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            try:
                import shutil
                shutil.move(directory, backup_dir)
                os.makedirs(directory, exist_ok=True)
                print(f"\tüì¶ Existing content moved to: {os.path.basename(backup_dir)}")
            except Exception as e:
                return False, f"Failed to backup existing content: {e}"
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        print(f"\tüîÑ Cloning repository...")
        try:
            git.Repo.clone_from(repo_url, directory)
            print(f"\t‚úÖ Repository cloned successfully")
            return True, "Repository initialized and cloned"
        except git.exc.GitCommandError as e:
            return False, f"Failed to clone repository: {e}"
        except Exception as e:
            return False, f"Unexpected error during cloning: {e}"
            
    except KeyboardInterrupt:
        return False, "Interrupted by user"
    except Exception as e:
        return False, f"Error during repository initialization: {e}"

def update_repository(directory, is_disabled=False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    try:
        if not is_git_repository(directory):
            return False, "Not a git repository"
        
        repo = git.Repo(directory)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        try:
            repo_url = repo.remotes.origin.url
            print(f"\tüîó {repo_url}")
        except:
            print(f"\tüîó No remote origin found")
        
        # Fetch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            repo.remotes.origin.fetch()
        except git.exc.GitCommandError as e:
            return False, f"Failed to fetch: {e}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
        try:
            current_branch = repo.active_branch
            current_branch_name = current_branch.name
        except TypeError:
            return False, "Repository in detached HEAD state"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –≤–µ—Ç–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        target_branch, branch_type, switch_reason = find_best_branch_to_update(repo, current_branch_name)
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –≤–µ—Ç–æ–∫
        if target_branch != current_branch_name:
            branch_display = f"\t{Fore.RED}{current_branch_name} --> {target_branch}{Style.RESET_ALL}"
        elif branch_type == "custom":
            branch_display = f"\t{Fore.YELLOW}{current_branch_name} --> {target_branch}{Style.RESET_ALL}"
        else:  # default branch
            branch_display = f"\t{current_branch_name} --> {target_branch}"
        
        print(branch_display)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if switch_reason:
            print(f"\tüí° {switch_reason}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        stashed, stash_msg = stash_local_changes(repo)
        if stashed:
            print(f"\t{stash_msg}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é –≤–µ—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if target_branch != current_branch_name:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞
                local_branches = [branch.name for branch in repo.branches]
                if target_branch not in local_branches:
                    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É –∏–∑ remote
                    repo.git.checkout('-b', target_branch, f'origin/{target_branch}')
                else:
                    repo.git.checkout(target_branch)
            except git.exc.GitCommandError as e:
                return False, f"Failed to switch branch: {e}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ remote –≤–µ—Ç–∫–∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
            remote_refs = [ref.name for ref in repo.remotes.origin.refs]
            remote_branch_exists = f'origin/{target_branch}' in remote_refs
            
            if remote_branch_exists:
                remote_commits = list(repo.iter_commits(f'origin/{target_branch}', max_count=10))
                local_commits = {commit.hexsha for commit in repo.iter_commits(target_branch, max_count=50)}
            else:
                # –ï—Å–ª–∏ remote –≤–µ—Ç–∫–∏ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–∞—è - –ø—Ä–æ–±—É–µ–º push
                try:
                    local_branches = [branch.name for branch in repo.branches]
                    if target_branch in local_branches:
                        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å remote –≤–µ—Ç–∫—É
                        repo.git.push('--set-upstream', 'origin', target_branch)
                        repo.remotes.origin.fetch()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ remote
                        remote_commits = list(repo.iter_commits(f'origin/{target_branch}', max_count=10))
                        local_commits = {commit.hexsha for commit in repo.iter_commits(target_branch, max_count=50)}
                    else:
                        return False, f"Neither local nor remote branch '{target_branch}' found"
                except git.exc.GitCommandError:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å remote –≤–µ—Ç–∫—É, —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π
                    return True, f"‚úÖ Local branch only (no remote tracking)"
        except Exception as e:
            return False, f"Failed to get commit information: {e}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã
        new_commits = [commit for commit in remote_commits if commit.hexsha not in local_commits]
        
        if not new_commits:
            return True, "‚úÖ No changes"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º pull
        try:
            current_branch = repo.active_branch
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ tracking branch
            if current_branch.tracking_branch():
                result = repo.git.pull()
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å upstream
                try:
                    repo.git.branch('--set-upstream-to', f'origin/{target_branch}', target_branch)
                    result = repo.git.pull()
                except git.exc.GitCommandError:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å upstream, –ø—Ä–æ–±—É–µ–º pull —Å —É–∫–∞–∑–∞–Ω–∏–µ–º remote –∏ branch
                    try:
                        result = repo.git.pull('origin', target_branch)
                    except git.exc.GitCommandError as e:
                        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ –∏–ª–∏ —Ñ–æ—Ä–∫
                        if "couldn't find remote ref" in str(e).lower():
                            return True, f"‚úÖ Local branch (no remote updates available)"
                        else:
                            raise e
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            update_log = f"‚û°Ô∏è Updates ({len(new_commits)} commits):\n"
            for commit in reversed(new_commits):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã
                commit_date = commit.committed_datetime.strftime('%Y-%m-%d %H:%M')
                commit_msg = commit.message.strip().split('\n')[0][:80]
                update_log += f"\t   ‚Ä¢ {commit_date}: {commit_msg}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
                diff_stats = repo.git.diff('--stat', f'HEAD~{len(new_commits)}', 'HEAD')
                if diff_stats.strip():
                    update_log += f"\tüìÅ Changed files:\n"
                    for line in diff_stats.split('\n'):
                        if line.strip() and '|' in line:
                            update_log += f"\t   {line.strip()}\n"
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë
            
            return True, update_log.rstrip()
            
        except git.exc.GitCommandError as e:
            return False, f"Pull failed: {e}"
    
    except Exception as e:
        return False, f"Unexpected error: {e}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print(f"{Fore.CYAN}üöÄ Starting repository updates...{Style.RESET_ALL}\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        env_type = config_manager.get_value('env_type')
        if env_type == 'conda':
            config_manager.get_value('conda_path')
            config_manager.get_value('conda_env')
            config_manager.get_value('conda_env_folder')

        custom_nodes_dir = config_manager.get_value('custom_nodes_path')
        parent_dir = Path(custom_nodes_dir).parent

        # –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        directories = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π ComfyUI
        directories.append(str(parent_dir))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–∑ custom_nodes
        if os.path.exists(custom_nodes_dir):
            for item in os.listdir(custom_nodes_dir):
                item_path = os.path.join(custom_nodes_dir, item)
                if os.path.isdir(item_path) and not should_skip_directory(item_path):
                    if item == '.disabled':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º disabled —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                        disabled_repos = []
                        if os.path.exists(item_path):
                            for disabled_item in os.listdir(item_path):
                                disabled_item_path = os.path.join(item_path, disabled_item)
                                if os.path.isdir(disabled_item_path) and is_git_repository(disabled_item_path):
                                    disabled_repos.append(disabled_item_path)
                        directories.extend(disabled_repos)
                    else:
                        directories.append(item_path)

        print(f"Found {len(directories)} repositories to update\n")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        success_count = 0
        error_count = 0
        skipped_count = 0
        initialized_count = 0
        
        for directory in directories:
            repo_name = os.path.basename(directory)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
            if not is_git_repository(directory):
                print(f"{Fore.YELLOW}{repo_name}{Style.RESET_ALL}")
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                success, message = initialize_git_repository(directory)
                
                if success:
                    initialized_count += 1
                    print(f"\t{message}")
                    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
                    if is_git_repository(directory):
                        print(f"\tüîÑ Now updating the newly cloned repository...")
                        is_disabled = '.disabled' in directory
                        success, update_message = update_repository(directory, is_disabled)
                        if success:
                            success_count += 1
                            print(f"\t{update_message}")
                        else:
                            error_count += 1
                            print(f"\t‚ùå Update error: {update_message}")
                else:
                    skipped_count += 1
                    print(f"\t‚è≠Ô∏è  {message}")
                
                print()
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ disabled –ø–∞–ø–∫–µ
            is_disabled = '.disabled' in directory
            disabled_suffix = " (disabled)" if is_disabled else ""
            
            print(f"{Fore.GREEN}{repo_name}{disabled_suffix}{Style.RESET_ALL}")
            
            success, message = update_repository(directory, is_disabled)
            
            if success:
                success_count += 1
                if "No changes" in message:
                    print(f"\t{message}")
                else:
                    print(f"\t{message}")
            else:
                error_count += 1
                print(f"\t‚ùå Error: {message}")
            
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"{Fore.CYAN}üìä Summary:{Style.RESET_ALL}")
        print(f"\t‚úÖ Successfully processed: {success_count}")
        print(f"\t‚ùå Errors: {error_count}")
        print(f"\tüÜï Newly initialized: {initialized_count}")
        print(f"\t‚è≠Ô∏è  Skipped: {skipped_count}")
        print(f"\tüìÅ Total directories checked: {len(directories) + skipped_count}")

    except Exception as e:
        print(f"{Fore.RED}üí• Fatal error: {e}{Style.RESET_ALL}")

if __name__ == "__main__":
    main()
    input("\nPress Enter to exit...")